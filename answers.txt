Question: If you create a constructor method to build a DVD by title then create a constructor method to build a DVD by category. 
Does JAVA allow you to do this?

Answer:
- Yes, Java allows to do this through constructor overloading. In Java, you can define multiple constructors in a class as long as they have different parameter lists.
- For example, you can create a DVD class with 2 constructors:
	class DVD {
		String title;
		String category;
		
		public DVD(String title) {
			this.title = title;
		}

		public DVD(String category, boolean isCategory) {
			this.category = category;
		}
	}
- In this case, Java distinguishes between 2 constructors based on their parameters. The first constructor takes a single String argument for the title, while the second 
constructor takes a String and a boolean to differentiate it as a category constructor.
- So, Java does allow to create multiple constructors for different ways of initializing an object.



14.1. Overloading
Question: array parameter (DigitalVideoDisc[]) and using varargs(DigitalVideoDisc...)? Which do you prefer to use in this case?

Answer:
- I prefer using varargs (DigitalVideoDisc...) more, because:
	1. More flexible: it allows passing any number of DVDs without explicitly creating an array
	2. Easier to use: simpler and more intuitive, e.g.,
	3. Improves readability: cleaner and easier to maintain.
	4. More natural: users donâ€™t have to worry about array syntax when adding DVDs.



15. Passing parameter
Question: After the call of swap(jungleDVD, cinderellaDVD) why does the title of these two objects still remain?

Answer:
- The method swap(jungleDVD, cinderellaDVD) does not actually swap the 2 DVD objects because Java passes a copy of the reference, not the reference itself.
	+ Inside the swap method, o1 and o2 are just copies of the original references.
	+ When swapping o1 and o2, we are only changing where these copies point, but the original references (jungleDVD and cinderellaDVD in main) remain the same.
	+ This means that the original objects are not affected, and their titles remain unchanged.
- So, Java does not allow swapping object references using a method like this because it passes copies of the references, not the actual references.


Question: After the call of changeTitle(jungleDVD, cinderellaDVD.getTitle()) why is the title of the JungleDVD changed?

Answer:
- In this case, the changeTitle method modifies the actual object that jungleDVD is pointing to.
	+ The method receives a copy of the reference to jungleDVD.
	+ Since both the original reference and the copied reference point to the same object, calling dvd.setTitle(title) modifies the object itself.
	+ However, when dvd = new DigitalVideoDisc(oldTitle) is executed, it only changes the copied reference, not the original reference in main.
	+ Therefore, the original jungleDVD object keeps the new title assigned in dvd.setTitle(title), but it does not become a new object.
- So, when modifying the object's properties, changes persist because both references point to the same object. However, reassigning the reference inside the method 
does not affect the original reference outside the method.


Question: Is JAVA a Pass by Value or a Pass by Reference programming language?

Answer:
- Java is a Pass by Value language. This means that when a variable is passed to a method, Java passes a copy of the value, not the actual reference itself.
However, the behavior can be different depending on wether primitive types or objects.
	1. Primitive types (int, double, boolean, etc.)
- Java copies the actual value and passes it to the method.
- Any changes inside the method do not affect the original variable.
	2. Objects (reference types)
- Java passes a copy of the reference to the method, not the actual object.
- Since both the original reference and the copied reference point to the same object, modifications made to the object inside the method will reflect on the original object.
- However, if the method reassigns the reference to a new object, the original reference remains unchanged outside the method.
Conclusion: Even though Java seem like Pass by Reference when working with objects, it is still Pass by Value because only a copy of the reference is passed, not the actual object.
